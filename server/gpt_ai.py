import os
import json
import logging
from openai import OpenAI
from openai.types.chat import ChatCompletionSystemMessageParam, ChatCompletionUserMessageParam
from dotenv import load_dotenv

load_dotenv()

API_KEY = os.getenv('OPENAI_API_KEY')
MODEL_NAME = 'gpt-5-nano'
SYSTEM_INSTRUCTION = """
You are an expert AI content detection analyst. Your task is to analyze the provided text snippet and determine the probability (0 to 100) that it was primarily generated by a large language model (LLM).

Focus on the following criteria: repetitive phrasing, lack of unique human voice, standardized structure, and unnaturally formal language.

Your response MUST be a JSON object with two keys: "score" (integer 0-100) and "reason" (brief explanation).
"""

def gpt_ai_score(text: str) -> dict:
    """OpenAI GPT를 사용하여 텍스트의 AI 작성 확률을 계산합니다."""
    if not API_KEY:
        return {'score': -1, 'reason': 'Not found OPENAI_API_KEY.'}

    try:
        client = OpenAI(api_key=API_KEY)
        messages = [
            ChatCompletionSystemMessageParam(role="system", content=SYSTEM_INSTRUCTION),
            ChatCompletionUserMessageParam(role="user", content=f"""
            Analyze the following text and provide the AI generation probability score based on the criteria provided:
            --- TEXT BEGIN ---
            {text[:8000]}
            --- TEXT END ---
            """)
        ]

        response = client.chat.completions.create(
            model=MODEL_NAME,
            messages=messages,
            response_format={ "type": "json_object" }
        )

        content = response.choices[0].message.content
        if content is None:
            return {"score": -1, "reason": "Empty response from AI."}
        res_text = content.strip()
        result = json.loads(res_text)

        score = max(0, min(100, int(result.get('score', 0))))
        reason = result.get('reason', 'Analysis not available.')

        return {'score': score, 'reason': reason}

    except json.JSONDecodeError:
        logging.error(f"GPT returned unparseable JSON: {res_text}")
        return {"score": -1, "reason": "AI output format error."}
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")
        return {"score": -1, "reason": f"Unexpected error: {str(e)}"}
